.. _8-kidsblockscratch-教程:

8. KidsBlock(Scratch) 教程
==========================

.. _81-kidsblockscratch-资料下载:

8.1. KidsBlock(Scratch) 资料下载
--------------------------------

\ **⚠️特别提示:**
请先下载本教程需要用到的KidsBlock(Scratch)资料(包含：KidsBlock(Scratch)_代码等）和
Android_APP 等，保存至您方便使用的路径下。

**下载：** :download:`KidsBlock(Scratch)资料 <./KidsBlock(Scratch)资料.7z>` 和 :download:`Android_APP <./Android_APP.7z>`

.. _82-kidsblock-ide开发环境设置:

8.2. KidsBlock IDE开发环境设置
------------------------------

.. _821-下载和安装-kidsblock-ide:

8.2.1. 下载和安装 KidsBlock IDE
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- 如何下载、安装及使用 KidsBlock IDE
  的参考链接：\ https://www.keyesrobot.cn/projects/KidsBlock/zh-cn/latest/

.. _822-选择设备:

8.2.2. 选择设备
~~~~~~~~~~~~~~~

（1）驱动安装完后，点击\ |image1|\ 进入主控板页面，可以选择需要添加的设备（控制板），本项目需要选择SmarthomeESP32。先点击SmarthomeESP32所处区域，后点击“连接”。这样SmarthomeESP32已连接上，点击“返回编辑器”回到编码编辑器。这样，我们会发现\ |image2|\ 变成\ |image3|\ ，同时\ |image4|\ 变成\ |image5|\ ，说明SmarthomeESP32和端口（COM）都已经连接上了。

|image6|

|image7|

|image8|

|image9|

（2）假如SmarthomeESP32已经连接上后，但是\ |image10|\ 没有变成\ |image11|\ ，则需要手动点击\ |image12|\ 来连接端口（COM）。先点击\ |image13|\ ，在出现的对话页面中点击\ |image14|\ ，连接成功后，会出现“已连接”页面，说明端口已连接上了。

|image15|

|image16|

|image17|

|image18|

（3）如果需要断开端口，先点击\ |image19|\ ，在出现的对话页面中点击“断开连接”。这样，端口就断开了。

|image20|

|image21|

（4）打开已有的SB3类型文件的方法：

打开Kidsblock软件，点击“文件”，选择点击“从电脑中上传”，在电脑上选中需要打开的SB3类型文件（例如：\ |image22|\ 文件）

|image23|

|image24|

|image25|

.. _823-启动你的第一个程序:

8.2.3. 启动你的第一个程序
~~~~~~~~~~~~~~~~~~~~~~~~~

1. 可以直接打开我们编写好的程序：点击文件下的从电脑中上传，然后找到目录下的\ |image26|\ 程序并打开

========================== ===============
文件路径                   文件名
========================== ===============
..\\KidsBlock(Scratch)资料 Hello_World.sb3
========================== ===============

|image27|

2. 上传程序：选择正确串口，波特率是：\ **9600**
   ；SmarthomeESP32和端口都选择正确；然后点击上传程序，程序上传成功会提示上传成功。

|image28|

（3）实验结果：左下角监视窗口每隔0.5S打印一次“Hello World”

|image29|

.. _83-项目教程:

8.3. 项目教程
-------------

⚠️
**特别提醒：ESP32智能家居已经组装好了，接下来进入项目教程，以下各个项目实验中的传感器模块都不需要拆下来又重新组装和接线，每个项目实验再次提供接线图，是为了方便您编写代码！**

第1课 LED闪烁
~~~~~~~~~~~~~

**1.1. 项目介绍：**

前面我们已经组装好了智能家居。接下来的项目我们就要由简单到复杂，一步一步探索Arduino的世界了。首先我们要来完成经典的“Arduino点亮LED”，也就是Blink项目。Blink对于学习Arduino的爱好者而言，是最基础的项目，也是新手必须经历的一个练习。

LED，即发光二极管的简称。由含镓（Ga）、砷（As）、磷（P）、氮（N）等的\ `化合物 <https://baike.baidu.com/item/%E5%8C%96%E5%90%88%E7%89%A9/1142931>`__\ 制成。当电子与\ `空穴 <https://baike.baidu.com/item/%E7%A9%BA%E7%A9%B4/3517781>`__\ 复合时能辐射出可见光，因而可以用来制成发光二极管。在电路及仪器中作为指示灯，或者组成文字或数字显示。砷化镓二极管发红光，磷化镓二极管发绿光，碳化硅二极管发黄光，氮化镓二极管发蓝光。因化学性质又分有机发光二极管OLED和无机发光二极管LED。

为了实验的方便，我们将LED发光二极管做成了一个LED模块，在这个项目中，我们用一个最基本的测试代码来控制LED，亮一秒钟，灭一秒钟，来实现闪烁的效果。你可以改变代码中LED灯亮灭的时间，实现不同的闪烁效果。LED模块信号端S为高电平时LED亮起，S为低电平时LED熄灭。

**1.2. 模块相关资料：**

|image30|

============= ==================
工作电压:     DC 3.3-5V
============= ==================
工作电流：    20mA
最大功率：    0.1W
控制接口:     数字口（数字输入）
工作温度：    -10°C ~ +50°C
LED显示颜色： 黄色
============= ==================

**1.3. 实验组件：**

=================== ============= =============== =========
|image31|           |image32|     |image33|       |image34|
=================== ============= =============== =========
ESP32 Plus主板 \* 1 黄色LED模块*1 3P 转杜邦线母*1 USB线*1
=================== ============= =============== =========

**1.4. 模块接线图：**

黄色LED灯的控制引脚：

- 黄色LED灯（S引脚）io12

|image35|

注意：这里体现的是实验使用到的模块接线图，若前面已经组装好智能家居并不用拆掉

**1.5. 实验代码：**

|image36|

**1.6. 实验结果：**

将示例代码上传到主板，上传成功后，外接电源供电，可以看到黄色LED灯不断地闪烁。

第2课 呼吸灯
~~~~~~~~~~~~

**1.1. 项目介绍：**

在之前的研究中，我们知道LED有亮/灭状态，那么如何进入中间状态呢?如何输出一个中间状态让LED“半亮”?这就是我们将要学习的。呼吸灯，即LED由灭到亮，再由亮到灭，就像“呼吸”一样。那么，如何控制LED的亮度呢?我们将使用ESP32的PWM来实现这个目标。

**1.2. 模块相关资料：**

|image37|

============= ==================
工作电压:     DC 3.3-5V
============= ==================
工作电流：    20mA
最大功率：    0.1W
控制接口:     数字口（数字输入）
工作温度：    -10°C ~ +50°C
LED显示颜色： 黄色
============= ==================

**1.3. 元件知识：**

|image38|

**Analog & Digital**

模拟信号在时间和数值上都是连续的信号。相反，数字信号或离散时间信号是由一系列数字组成的时间序列。生活中的大多数信号都是模拟信号。一个熟悉的模拟信号的例子是，全天的温度是如何不断变化的，而不是突然从0到10的瞬间变化。然而，数字信号的值可以瞬间改变。这个变化用数字表示为1和0(二进制代码的基础)。如下图所示，我们可以更容易地看出它们的差异。

|image39|

在实际应用中，我们经常使用二进制作为数字信号，即一系列的0和1。由于二进制信号只有两个值(0或1)，因此具有很大的稳定性和可靠性。最后，可以将模拟信号和数字信号相互转换。

**PWM：**

脉宽调制(PWM)是一种利用数字信号控制模拟电路的有效方法。普通处理器不能直接输出模拟信号。PWM技术使这种转换(将数字信号转换为模拟信号)非常方便。PWM技术利用数字引脚发送一定频率的方波，即高电平和低电平的输出，交替持续一段时间。每一组高电平和低电平的总时间一般是固定的，称为周期(注:周期的倒数是频率)。高电平输出的时间通常称为脉宽，占空比是脉宽(PW)与波形总周期(T)之比的百分比。高电平输出持续时间越长，占空比越长，模拟信号中相应的电压也就越高。下图显示了对应于脉冲宽度0%-100%的模拟信号电压在0V-3.3V(高电平为3.3V)之间的变化情况.

|image40|

PWM占空比越长，输出功率越高。既然我们了解了这种关系，我们就可以用PWM来控制LED的亮度或直流电机的速度等等。从上面可以看出，PWM并不是真实的模拟信号，电压的有效值等于相应的模拟信号。因此，我们可以控制LED和其他输出模块的输出功率，以达到不同的效果。

**ESP32 与 PWM**

在ESP32上，LEDC(PWM)控制器有16个独立通道，每个通道可以独立控制频率，占空比，甚至精度。与传统的PWM引脚不同，ESP32的PWM输出引脚是可配置的，每个通道有一个或多个PWM输出引脚。最大频率与比特精度的关系如下公式所示：

|image41|

其中比特的最大值为31。例如,生成PWM的8位精度(2的8次方 = 256。取值范围为0
~ 255)，最大频率为80,000,000/255 = 312,500Hz。)

**1.4. 实验组件：**

=================== ============= =============== =========
|image42|           |image43|     |image44|       |image45|
=================== ============= =============== =========
ESP32 Plus主板 \* 1 黄色LED模块*1 3P 转杜邦线母*1 USB线*1
=================== ============= =============== =========

**1.5. 模块接线图：**

黄色LED的控制引脚：

- 黄色LED灯（S引脚）io12

|image46|

**注意：**
这里体现的是实验使用到的模块接线图，若前面已经组装好智能家居并不用拆掉

**1.6. 实验代码：**

|image47|

|image48|

**1.7. 实验结果：**

将示例代码上传到主板，上传成功后，外接电源供电，可以看到黄色LED灯渐亮渐暗，似乎在呼吸。

第3课 台灯
~~~~~~~~~~

**1.1. 项目介绍：**

常见的台灯，用到了LED灯和按键。通过按按键来控制灯的开与关。

按键按下，我们的单片机读取到低电平，松开读取到高电平。在这一实验课程中，我们利用按键和黄色LED做一个扩展，当按键按下时即读取到低电平时点亮黄色LED灯，松开按键时即读取到高电平时熄灭黄色LED灯，这样就可以通过一个模块控制另一个模块了。

**1.2. 模块相关资料：**

|image49|

附原理图，按键有四个引脚，其中1和3是相连的，2和4是相连的，在我们未按下按键时，13与24是断开的，信号端S读取的是被4.7K的上拉电阻R1所拉高的高电平，而当我们按下按键时，13和24连通。信号端S连接到了GND，此时读取到的电平为低电平，即按下按键，传感器信号端为低电平；松开按键时，信号端为高电平。

**1.3. 实验组件：**

=================== ============= ========= =============== =========
|image50|           |image51|     |image52| |image53|       |image54|
=================== ============= ========= =============== =========
ESP32 Plus主板 \* 1 黄色LED模块*1 按键*1    3P 转杜邦线母*2 USB线*1
=================== ============= ========= =============== =========

**1.4. 模块接线图：**

木板房子⑦处按键1和黄色LED的控制引脚：

========================= ====
木板房子⑦处按键1（S引脚） io16
========================= ====
黄色LED灯（S引脚）        io12
========================= ====

|image55|

**1.5. 读取按钮值的实验代码1：**

读取按钮的状态值，在串口监视器中显示出来，这样就可以直观的看到按钮的状态值。

|image56|

**1.6. 实验结果1：**

上传测试代码成功，上电后，在串口监视器区，先点击\ |image57|\ ，再设置波特率为9600。再按下⑦处的按键1就可以看到按键状态值的改变，如下图。

|image58|

**1.7. 台灯的实验代码2：**

计算按键被点击的次数，然后再对计算的次数进行对2求余数，即可得到0或1两种状态值。

|image59|

|image60|

**1.8. 实验结果2：**

上传测试代码成功，上电后，在串口监视器区，先点击\ |image61|\ ，再设置波特率为9600。打印出按键被点击的次数，并且点击一次⑦处按键1，LED灯就亮，再点击一次，LED关闭。

|image62|

第4课 人体感应灯
~~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

人体红外热释电传感器和按钮一样也是数字传感器，也就是有两个状态值0或1。还有需要人在动时才能感应的到。

人体红外热释电传感器在日常生活中是有很多应用场景的，例如，楼梯的自动感应灯，洗手台的自动感应水龙头等。

**1.2. 模块相关资料：**

|image63|

============== =================================
工作电压：     DC 4.5-6.5V
============== =================================
最大工作电流： 50MA
静态电流:      50uA
控制接口：     数字输出(高电平为3.3V ，低电平0V)
控制信号：     数字信号1/0
工作温度：     -10 ~ 50 ℃
最大探测距离： 4米
感应角度：     ＜100°锥角
============== =================================

**1.3. 元件知识：**

**人体红外热释电传感器：**
它是一款基于热释电效应的人体热释电红外运动传感器，能检测运动的人体或动物身上发出的红外信号，配合菲涅尔透镜能使传感器探测范围更远更广。它主要采用RE200B-P传感器元件，当附近有人或动物运动时，人体红外热释电传感器能根据检测到的红外线，将红外线信号转化为数字信号并输出一个高电平。它可以应用于多种场合来检测人体的运动。传统的热释电红外传感器体积大，电路复杂，可靠性低。

现在我们推出这款一款新的热释电红外运动传感器，该传感器集成了数字热释电红外传感器和连接管脚。具有灵敏度高、可靠性强、超低功耗，体积小、重量轻，超低电压工作模式和外围电路简单等特点。

**1.4. 实验组件：**

+-------------+-------------+-------------+-------------+-----------+
| |image74|   | |image75|   | |image76|   | |image77|   | |image78| |
+=============+=============+=============+=============+===========+
| ESP32       | 人体红外热  | 黄          | 3P          | USB线*1   |
| Plus主板 \* | 释传感器*1  | 色LED模块*1 | 转          |           |
| 1           |             |             | 杜邦线母*2  |           |
+-------------+-------------+-------------+-------------+-----------+

**1.5. 模块接线图：**

人体红外热释传感器和黄色LED灯的控制引脚：

=========================== ====
人体红外热释传感器（S引脚） io14
=========================== ====
黄色LED灯（S引脚）          io12
=========================== ====

|image79|

**1.6. 读取人体红外热释电传感器值的实验代码1**\ ：

通过串口打印出人体红外热释电传感器的状态值。

|image80|

**1.7. 实验结果1：**

上传好代码，在串口监视器区，先点击\ |image81|\ ，再设置波特率为9600。，通过串口监视器打印的数据可以看到，当你在传感器前静止不动，读取到的值是0，稍微动一下，读取到的值就变为1.

|image82|

**1.8. 人体感应灯的实验代码2：**

只要有人在人体红外热释电传感器前面移动一下，LED灯就会亮起。

|image83|

**1.9. 实验结果2：**

上传好代码，上电后，用手在传感器前面移动一下，LED灯亮起，人静止不动几秒后，LED灯关闭。

第5课 演奏音乐
~~~~~~~~~~~~~~

**1.1. 项目介绍：**

本实验用无源蜂鸣器播放音乐，无源蜂鸣器是通过PWM脉冲宽度调制脉冲进而调节音调，

PWM比较多用于调节LED灯的亮度或者调节无源蜂鸣器的频率，或者是电机的转动速度，电机带动的车轮速度也就能很容易控制了，在玩一些Arduino机器人时，更能体现PWM的好处。

音乐除了要“唱的准”，还要“节奏对”，每一个音符的持续时间，就是节拍啦。我们可以用延时多少来设置节拍的，例如：1拍，1秒即1000毫秒；1/2拍，0.5秒即500毫秒；1/4拍，0.25秒即250毫秒；1/8拍，0.125秒即125毫秒….，我们可以试一试组合不同的音调和节拍，看看会有什么不同的效果。在这一课程中，我们通过代码控制蜂鸣器发声，从最简单的发出do、re、mi、fa、so、la、si
声音到让蜂鸣器播放特定的歌曲。

**1.2. 模块相关资料：**

|image84|

工作电压：3.3-5V（DC）

电流：50MA

工作温度：-10摄氏度 到 +50摄氏度

尺寸：31.6mmx23.7mm

接口：3PIN接口

输入信号：数字信号（方波）

**1.3. 元件知识：**

无源蜂鸣器：其内部不带震荡电路，控制时需要在元件正极输入不同频率的方波，负极接地，从而控制喇叭功放元件响起不同频率的声音。

**1.4. 实验组件：**

=================== ================ ========= =============== =========
|image85|           |image86|        |image87| |image88|       |image89|
=================== ================ ========= =============== =========
ESP32 Plus主板 \* 1 无源蜂鸣器模块*1 按键*1    3P 转杜邦线母*2 USB线*1
=================== ================ ========= =============== =========

**1.5. 模块接线图：**

木板房子⑦处按键1和无源蜂鸣器的控制引脚：

========================= ====
木板房子⑦处按键1（S引脚） io16
========================= ====
无源蜂鸣器（S引脚）       io25
========================= ====

|image90|

**1.6. 播放音符的实验代码1：**

|image91|

**1.7. 实验结果1：**

上传代码到开发板，上电后，就会听到无源蜂鸣器播放一次生日快乐。

**1.8. 音乐盒的实验代码2：**

做个音乐盒，通过按键来切换曲子。

|image92|

|image93|

|image94|

**1.9. 实验结果2：**

上传代码到开发板，上电后，点击一次按键1，播放一曲Ode_to_Joy，播放完之后，再点击按键1，播放christmas，播放完之后，再点击按键1，播放tetris。

第6课 自动门窗
~~~~~~~~~~~~~~

**1.1. 项目介绍：**

当我们在制作智能家居时，经常会将舵机和门、窗等固定在一起。这样，我们就可以利用舵机转动，带动门、窗等开或关，从而起到家居生活的智能化功能。既然是自动门窗，那就需要动力装置，我们使用的是180度的舵机。再加上一些传感器，就会变得更加自动化，例如添加个雨滴传感器，就可以做下雨自动关窗；增加个RFID，就可以实现刷卡开门等。

**1.2. 舵机相关资料：**

**舵机：**
舵机是一种位置伺服的驱动器，主要是由外壳、电路板、无核心马达、齿轮与位置检测器所构成。其工作原理是由接收机或者单片机发出信号给舵机，其内部有一个基准电路，产生周期为20ms，宽度为1.5ms
的基准信号，将获得的直流偏置电压与电位器的电压比较，获得电压差输出。经由电路板上的IC
判断转动方向，再驱动无核心马达开始转动，透过减速齿轮将动力传至摆臂，同时由位置检测器送回信号，判断是否已经到达定位。适用于那些需要角度不断变化并可以保持的控制系统。当电机转速一定时，通过级联减速齿轮带动电位器旋转，使得电压差为0，电机停止转动。

伺服电机有多种规格，但它们都有三根连接线，分别是棕色、红色、橙色(不同品牌可能有不同的颜色)。棕色为GND，红色为电源正极，橙色为信号线。

|image95|

舵机的伺服系统由可变宽度的脉冲来进行控制，橙色的控制线是用来传送脉冲的。一般而言，PWM控制舵机的基准信号周期为20ms（50Hz），理论上脉宽应在1ms到2ms之间，对应控制舵机角度是0°～180°。但是，实际上更多控制舵机的脉宽范围是0.5ms
到2.5ms，具体需要自己实际调试下。

|image96|

经过实测，舵机的脉冲范围为0.65ms~2.5ms。180度舵机，对应的控制关系是这样的：

========== ======== ==========================
高电平时间 舵机角度 基准信号周期时间（20ms）
========== ======== ==========================
0.65ms     0度      0.65ms高电平+19.35ms低电平
1.5ms      90度     1.5ms高电平+18.5ms低电平
2.5ms      180度    2.5ms高电平+17.5ms低电平
========== ======== ==========================

**舵机的规格参数：**

============== ============= ================ ========================
工作电压：     DC 4.8V〜6V   可操作角度范围： 大约180°(在500→2500μsec)
============== ============= ================ ========================
脉波宽度范围： 500→2500 μsec 外观尺寸：       22.9\ *12.2*\ 30mm
============== ============= ================ ========================

========== ========================================================
空载转速： 0.12±0.01 sec/60度（DC 4.8V） 0.1±0.01 sec/60度（DC 6V）
========== ========================================================
空载电流： 200±20mA（DC 4.8V） 220±20mA（DC 6V）
停止扭力： 1.3±0.01kg·cm（DC 4.8V） 1.5±0.1kg·cm（DC 6V）
停止电流： ≦850mA（DC 4.8V） ≦1000mA（DC 6V）
待机电流： 3±1mA（DC 4.8V） 4±1mA（DC 6V）
重量:      9±1g (without servo horn)
使用温度： -30℃~60℃
========== ========================================================

**1.3. 实验组件：**

+---------------------+------------------+-------------+-----------------+------------+
| |image102|          | |image103|       | |image104|  | |image105|      | |image106| |
+=====================+==================+=============+=================+============+
| ESP32 Plus主板 \* 1 | 水滴传感器模块*1 | 180度舵机*2 | 3P 转杜邦线母*1 | USB线*1    |
+---------------------+------------------+-------------+-----------------+------------+

**1.4. 模块接线图：**

水滴传感器，窗户舵机和门舵机的控制引脚：

======================== ====
窗户舵机（橙黄色线引脚） io5
======================== ====
门舵机（橙黄色线引脚）   io13
水滴传感器（S引脚）      io34
======================== ====

|image107|

**1.5. 控制门来回转动的实验代码1：**

|image108|

**1.6. 实验结果1：**

上传测试代码成功，外接电源供电后，“智能家居的门”0~180度来回转动，并且每20ms转动一度。

**1.7. 下雨自动关窗的实验代码2：**

使用舵机和雨滴传感器搭配做个下雨自动关窗装置。

**雨滴传感器：**
这是个模拟输入传感器，水分覆盖到检测面上的面积越大，返回的值越大（范围0~4096）

|image109|

**1.8. 实验结果2：**

上传测试代码成功，外接电源供电后，开始窗户自动打开，然后用手（手皮肤有水）触碰一下雨滴传感器，窗户就会关闭。

第7课 氛围灯
~~~~~~~~~~~~

**1.1. 项目介绍：**

智能家居的氛围灯是4个SK6812RGBLED，RGBLED属于简单的发光模块，可以通过调节色彩调出不同颜色的灯效，可广泛应用于建筑物、桥梁、道路、花园、庭院、地板等领域的装饰照明与会场布置、圣诞节、万圣节、情人节、复活节、国庆节等节日期间烘托气氛等场景。在本实验中，实现各种灯光效果。

**1.2. 模块相关资料：**

**SK6812RGB：**
从原理图中可以看出，这4个RGBLED都是串联起来的，在电压电流充足的情况下可以接几百个RGB
LED，都可以用一根信号线控制任意一个RGB
LED，并且让它显示任意一种颜色。每一颗RGBLED都是一个独立的像素点，每个像素点都是由R、G、B三基色颜色组成，可实现256级亮度显示，完成16777216种颜色的全真色彩显示，同时像素点内部包含了智能数字接口数据锁存信号整形放大驱动电路，还内置信号整形电路，有效保证了像素点光的颜色高度一致。

数据协议采用单线归零码的通讯方式，像素点在上电复位以后，S端接受从控制器传输过来的数据，首先送过来的24bit数据被第一个像素点提取后，送到像素点内部的数据锁存器。这个6812RGB通讯协议与驱动已经在底层封装好了，我们直接调用函数的接口就可以使用，简单方便，LED具有低电压驱动，环保节能，亮度高，散射角度大，一致性好，超低功率，超长寿命等优点。

|image110|

**1.3. 实验组件：**

=================== ========== ============= =============== ==========
|image111|          |image112| |image113|    |image114|      |image115|
=================== ========== ============= =============== ==========
ESP32 Plus主板 \* 1 按键*2     SK6812RGB灯*1 3P 转杜邦线母*3 USB线*1
=================== ========== ============= =============== ==========

**1.4. 模块接线图：**

按键1，按键2和SK6812RGB灯模块的控制引脚：

==================== ====
SK6812RGB灯（S引脚） io26
==================== ====
按键1（S引脚）       io16
按键2（S引脚）       io27
==================== ====

|image116|

**1.5. 控制SK6812的实验代码1：**

控制SK6812显示各种灯效。

|Img|

**1.6. 实验结果1：**

将示例代码上传到主板，上传成功后，外接电源供电，智能家居的氛围灯显示各种颜色和各种灯效。

**1.7. 按钮切换灯颜色的实验代码2：**

两个按钮，左右切换氛围灯的颜色。

|image117|

**1.8. 实验结果2：**

将示例代码上传到主板，上传成功后，外接电源供电，通过点击按键1和按键2来切换氛围灯的颜色。

第8课 风扇
~~~~~~~~~~

**1.1. 项目介绍：**

130电机控制模块采用HR1124S电机控制芯片。HR1124S是应用于直流电机方案的单通道H桥驱动器芯片。HR1124S的H桥驱动部分采用低导通电阻的PMOS和NMOS功率管。低导通电阻保证芯片低的功率损耗，使得芯片安全工作更长时间。此外HR1124S拥有低待机电流，低静态工作电流，这些性能使HR1124S易用于玩具方案。

该模块兼容各种单片机控制板，如arduino系列单片机。模块上自带的防反插红色端子间距为2.54mm，实验中，我们可通过输出到两个信号端IN+和IN-的电压方向来控制电机的转动方向，使用PWM输出控制风扇的转速，让电机转动起来。

**1.2. 模块相关资料：**

**（1）元件知识：**

130电机控制模块采用HR1124S电机控制芯片。HR1124S是应用于直流电机方案的单通道H桥驱动器芯片。HR1124S的H桥驱动部分采用低导通电阻的PMOS和NMOS功率管。低导通电阻保证芯片低的功率损耗，使得芯片安全工作更长时间。此外HR1124S拥有低待机电流，低静态工作电流，这些性能使HR1124S易用于玩具方案。

该模块兼容各种单片机控制板，如arduino系列单片机。模块上自带的防反插红色端子间距为2.54mm，实验中，我们可通过输出到两个信号端IN+和IN-的电压方向来控制电机的转动方向，使用PWM输出控制风扇的转速，让电机转动起来。

|image118|

========== ============ ========== ====================
工作电压： 3.3-5V(DC)   最大电流： 200mA (DC5V)
========== ============ ========== ====================
最大功率： 1W           控制接口： 双数字口（数字输入）
工作温度： -10°C ~+50°C 环保属性： ROHS
========== ============ ========== ====================

**（2）控制方法**

需要两个引脚控制风扇的电机，一引脚为IN+，二引脚为IN-。PWM值范围是0~255，当两个引脚的PWM输出一定差值时，风扇就能转动。

=================== ==========
IN+ - INB- = -45    顺时针转动
=================== ==========
IN+- IN- ;= 45      逆时针转动
IN+ == 0 , IN- == 0 停止
=================== ==========

**1.3. 实验组件：**

=================== =============== ============= ==========
|image119|          |image120|      |image121|    |image122|
=================== =============== ============= ==========
ESP32 Plus主板 \* 1 按键*2          130电机模块*1 风扇叶*1
|image123|          |image124|      |image125|    
4P 转杜邦线母*1     3P 转杜邦线母*2 USB线*1       
=================== =============== ============= ==========

**1.4. 模块接线图：**

按键1，按键2和130电机模块的控制引脚：

================= ====
按键1（S引脚）    io16
================= ====
按键2（S引脚）    io27
电机模块的IN+引脚 io19
电机模块的IN-引脚 io18
================= ====

|image126|

**1.5. 控制风扇转动的实验代码1**\ ：

控制风扇的正反转和速度。

|image127|

**1.6. 实验结果1：**

烧录好测试程序，上电后，可以看到风扇顺时针和逆时针不同转速转动。

**1.7. 按钮开关风扇的实验代码2：**

一台简易的风扇，通过一个按键开关风扇，另一个按键控制风扇的速度。

由于代码比较长，请打开我们提供的示例代码Project_8.2_btn_fan查看，如下图位置：

|image128|

**1.8. 实验结果2：**

烧录好测试程序，上电后，点击一下按键1，风扇开始转动，点击按键2进行调速，总共可以调3个不同转速，再按一下按键1，风扇停止。

第9课 LCD1602显示
~~~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

|image129|

现代社会人类每天面对最多的就是屏幕了吧，电脑、手机和各类电子产品。屏幕是人与电子设备最好的交互方式之一，直观明了。

Keyes I2C 1602
LCD模块是可以显示2行，每行16个字符的液晶显示器模块。液晶显示器显示蓝底白字，自带I2C通信模块，使用时只需连接单片机I2C通信接口，大大节约了单片机资源。最初的1602
LCD需要7个IO端口来启动和运行，而Keyes I2C 1602 LCD模块内置Arduino
IIC/I2C接口，节省了5个IO端口。和Arduino液晶库文件兼容，用起来很简单。

LCD非常适合打印数据和显示数字。可以显示32个字符(16x2)。在Keyes I2C 1602
LCD模块的背面有一个蓝色的电位器，可以转动电位器来调整对比度。连接时请注意，LCD的GND和VCC不能接反，否则会损坏LCD。

**1.2. 模块相关资料：**

========== ===== ============== ================== ========== ========
工作电压： DC5V  I2C地址：      0x27               控制接口： I2C
========== ===== ============== ================== ========== ========
工作电流： 130mA 工作环境温度： 0°C ~ 45°C（推荐） 驱动芯片： PCF8574T
========== ===== ============== ================== ========== ========

+----------------------+----------------------+----------------------+
| GND：一个接地的引脚  | VCC：一个            | SDA：一              |
|                      | 连接到+5V电源的引脚  | 个连接到SDA（或A4）  |
|                      |                      | 的引脚，用于IIC通信  |
+======================+======================+======================+
| SCL：一              | 背光（蓝底白字）     | 可调对比度           |
| 个连接到SCL（或A5）  |                      |                      |
| 的引脚，用于IIC通信  |                      |                      |
+----------------------+----------------------+----------------------+

**1.3. 实验组件：**

=================== =================== =============== ==========
|image130|          |image131|          |image132|      |image133|
=================== =================== =============== ==========
ESP32 Plus主板 \* 1 I2C LCD1602模块\* 1 4P 转杜邦线母*1 USB线*1
=================== =================== =============== ==========

**1.4. 模块接线图：**

I2C 1602 LCD模块的控制引脚：

========================= ===
I2C 1602 LCD模块的SCL引脚 SCL
========================= ===
I2C 1602 LCD模块的SDA引脚 SDA
========================= ===

|image134|

**1.5. 屏幕显示字符串的实验代码：**

|image135|

**1.6. 实验结果：**

上传好程序，上电后，LCD1602第一行显示hello，第二行显示keyes。

第10课 MQ2模拟气体传感器实验
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

气体传感器检测到危险气体比较浓时，蜂鸣器发出警报声，显示屏显示dangerous。

**1.2. 模块相关资料：**

|image136|

**（1）元件知识**

气体传感器（MQ-2）可用于家庭用气体泄漏报警器、工业用可燃气体报警器以及便携式气体检测仪器，适宜于液化气、苯、烷、酒精、氢气、烟雾等的探测，被广泛运用到各种消防报警系统中。故因此，气体传感器（MQ-2）可以准确来说是一个多种气体探测器，同时还具有灵敏度高、响应快、稳定性好、寿命长、驱动电路简单等优点。

气体传感器（MQ-2）检测可燃气体与烟雾的浓度范围是300~10000ppm，对天然气、液化石油气等烟雾有很高的灵敏度，尤其对烷类烟雾更为敏感。在使用之前必须加热一段时间，这样输出的电阻和电压较准确。但是加热电压不宜过高，否则会导致内部的信号线熔断。

模拟气体（MQ-2）传感器属于二氧化锡半导体气敏材料，属于表面离子式N型半导体。处于200~300摄氏度时，二氧化锡吸附空气中的氧，形成氧的负离子吸附，使半导体中的电子密度减少，从而使其电阻值增加。当与空气中可燃气体和烟雾烟雾接触时，如果晶粒间界处的势垒收到烟雾的调至而变化，就会引起表面导电率的变化。利用这一点就可以获得烟雾或可燃气体存在的信息，空气中烟雾或可燃气体的浓度越大，导电率越大，输出电阻越低，则输出的模拟信号就越大。

此外，通过旋转电位器可以调整气体传感器（MQ-2）灵敏度。上电后，传感器上的一个指示灯亮绿灯，并且还可以调节蓝色的正方体电位器，使模块上另一个指示灯介于不亮与亮之间的临界点时，灵敏度最高。

|image137|

**（2）参数**

|image138|

================== ==============================
工作电压：         3.3-5V
================== ==============================
工作电流：         160mA (DC5V)
工作温度：         0°C ~ 40°C
控制接口：         数字、模拟输出
检测浓度：         300-10000ppm(可燃气体)
浓度斜率：         ≤0.6(R3000ppm/R1000ppm C3H8)
灵敏度：           Rs(in air)/Rs(1000ppm异丁烷)≥5
敏感体表面电阻(Rs) 2KΩ-20KΩ(in 2000ppm C3H8 )
================== ==============================

**1.3. 实验组件：**

=================== =============== ================ ===============
|image139|          |image140|      |image141|       |image142|
=================== =============== ================ ===============
ESP32 Plus主板 \* 1 MQ2传感器*1     无源蜂鸣器模块*1 3P 转杜邦线母*1
|image143|          |image144|      |image145|       
I2C LCD1602模块\* 1 4P 转杜邦线母*2 USB线*1          
=================== =============== ================ ===============

**1.4. 模块接线图：**

MQ-2气体传感器，无源蜂鸣器和I2C 1602 LCD模块的控制引脚：

⚠️ **特别提醒：**
MQ-2气体传感器同时具有数字和模拟两个引脚。在本项目中，我们将只连接传感器的数字引脚（D引脚），连接到IO23，用于检测是否能够感应到可燃气体。

========================= ====
MQ-2气体传感器（D引脚）   io23
========================= ====
无源蜂鸣器（S引脚）       io25
I2C 1602 LCD模块的SCL引脚 SCL
I2C 1602 LCD模块的SDA引脚 SDA
========================= ====

|image146|

**1.5. 实验代码：**

|image147|

|image148|

**1.6. 实验结果：**

按照上图接线，烧录好程序，上电后，屏幕正常状态下显示safety，当气体传感器检测到一些危险气体，例如一氧化碳(可以用打火机气体测试)，检测到一定浓度时，蜂鸣器就会发出警报声，显示屏显示dangerous。

第11课 温湿度
~~~~~~~~~~~~~

**1.1. 项目介绍：**

|image149|

XHT11温湿度传感器（XHT11完全兼容DHT11）是一款含有已校准数字信号输出的温湿度复合传感器，其精度：湿度±5%RH，温度±2℃；量程：湿度5-95%RH，温度-20~60℃。XHT11温湿度传感器应用专用的数字模块采集技术和温湿度传感技术，确保产品具有极高的可靠性和卓越的长期稳定性。XHT11温湿度传感器包括一个电阻式感湿元件和一个NTC测温元件，非常适用于对精度和实时性要求不高的温湿度测量场合。

XHT11有三个引脚，分别为V，G，和S。S为数据输出的引脚，使用的是串行通讯。

**1.2. 模块相关资料：**

|image150|

============== =================
工作电压：     3.3V-5V（DC）
============== =================
最大工作电流： 50mA
最大功率：     0.25W
控制接口：     数字双向单总线
温度范围：     0-50℃（±2℃）
湿度范围：     20-90%RH（±5%RH）
工作温度：     -25℃~+60℃
============== =================

**XHT11温湿度传感器的单总线格式定义：**

+----------+----------------------------------------------------------+
| 名称     | 单总线格式定义                                           |
+==========+==========================================================+
| 起始信号 | 微处理器把数据总线（SDA）拉低一段时间至少                |
|          | 18ms（最大不得超过30ms），通知传感器准备数据。           |
+----------+----------------------------------------------------------+
| 响应信号 | 传感器把数据总线（SDA）拉低 83µs，再接高                 |
|          | 87µs以响应主机的起始信号。                               |
+----------+----------------------------------------------------------+
| 湿度     | 湿度高位为湿度整数部分数据，湿度低位为湿度小数部分数据   |
+----------+----------------------------------------------------------+
| 温度     | 温度高位为温度                                           |
|          | 整数部分数据，温度低位为温度小数部分数据，且温度低位Bit8 |
|          | 为 1 则表示负温度，否则为正温度。                        |
+----------+----------------------------------------------------------+
| 校验位   | 校验位＝湿度高位+湿度低位+温度高位+温度低位              |
+----------+----------------------------------------------------------+

**XHT11温湿度传感器数据时序图：**

用户主机（MCU）发送一次开始信号后，XHT11
从低功耗模式转换到高速模式，待主机开始信号结束后，XHT11
发送响应信号，送出 40bit 的数据，并触发一次信采集。信号发送如图所示。

|image151|

**1.3. 实验组件：**

=================== =============== ===============
|image152|          |image153|      |image154|
=================== =============== ===============
ESP32 Plus主板 \* 1 XHT11传感器*1   3P 转杜邦线母*1
|image155|          |image156|      |image157|
I2C LCD1602模块\* 1 4P 转杜邦线母*1 USB线*1
=================== =============== ===============

**1.4. 模块接线图：**

XHT11温湿度传感器和I2C 1602 LCD模块的控制引脚：

========================== ====
XHT11温湿度传感器（S引脚） io17
========================== ====
I2C 1602 LCD模块的SCL引脚  SCL
I2C 1602 LCD模块的SDA引脚  SDA
========================== ====

|image158|

**1.5. 实验代码：**

|image159|

**1.6. 实验结果：**

上传测试代码成功，上电后，LCD1602显示屏显示温度值，T=**℃(代码中用C表示℃，因为代码中直接用℃容易乱码)，湿度值H=**%RH，用口对着温湿度传感器呼一下气体，可以看到湿度值上升。

第12课 刷卡开门
~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

现在很多小区的门使用了刷卡开门这个功能，非常的方便。这节课我们将学习使用及RFID-MFRC522模块和磁卡（钥匙扣/白卡）控制门转动。

**1.2. 模块相关资料：**

**（1）元件知识**

**RFID：**
RFID(RadioFrequencyIdentification)是一种无线通信技术。一个完整的RFID系统一般由应答器和读取器组成。通常我们使用标签作为应答器，每个标签都有一个唯一的代码，它附着在物体上，用来识别目标物体。阅读器是用来读取(或写入)标签信息的设备。

从RFID技术衍生的产品可以分为三类：无源RFID产品、有源RFID产品和半有源RFID产品。而无源RFID产品是市场上最早、最成熟、使用最广泛的产品。它在我们的日常生活中随处可见，如公交卡、餐卡、银行卡、酒店门禁卡等，这些都属于近距离接触识别。无源RFID产品的主要工作频率有:125KHZ(低频)、13.56MHZ(高频)、433MHZ(超高频)、915MHZ(超高频)。有源和半有源RFID产品工作在更高的频率。

我们使用的RFID模块是无源RFID产品，工作频率为13.56MHz。

**RFID-RC522模块：**
MFRC522是一个高度集成的读取/写入器IC，用于13.56MHz的非接触式通信。MFRC522的内部发射器能够驱动一个读取/写入天线，设计用于与ISO/IEC14443A/MIFARE卡和应答器通信，而无需额外的有源电路。接收模块为来自ISO/IEC14443A/MIFARE兼容卡和应答器的信号解调和解码提供了一个健壮和高效的实现。数字模块管理完整的ISO/IEC14443A组帧和错误检测(奇偶校验和CRC)功能。

该RFID模块采用MFRC522作为控制芯片，采用I2C(Inter－IntegratedCircuit)接口。

**（2）规格参数：**

工作电压：DC3.3V-5V

工作电流：13—100mA/DC5V

空闲电流：10-13mA/DC5V

休眠电流：<80uA

峰值电流：<100mA

工作频率：13.56MHz

最大功率：0.5W

支持的卡类型：mifare1S50、mifare1S70、mifareUltraLight、mifarePro、mifareDesfire

环境工作温度：摄氏-20—80℃ 环境储存温度：摄氏-40—85℃
环境相对湿度：相对湿度5%—95%

数据传输速率：最大10Mbit/s

**1.3. 实验组件：**

========================= ================== =========== ===============
|image160|                |image161|         |image162|  |image163|
========================= ================== =========== ===============
ESP32 Plus主板 \* 1       RFID-MFRC522模块*1 180度舵机*1 3P 转杜邦线母*1
|image164|                |image165|         |image166|  |image167|
I2C LCD1602模块\* 1       按键*1             白卡*1      4P 转杜邦线母*1
|image168|                |image169|         |image170|  
4pin 黑红蓝绿母对母连拼*1 USB线*1            钥匙扣*1    
========================= ================== =========== ===============

**1.4. 模块接线图：**

RFID-RC522模块，木板房子⑦处按键1，门舵机和I2C 1602 LCD模块的控制引脚：

========================= ====
木板房子⑦处按键1（S引脚） io16
========================= ====
门舵机（橙黄色线引脚）    io13
RFID-RC522模块的SCL引脚   SCL
RFID-RC522模块的SDA引脚   SDA
I2C 1602 LCD模块的SCL引脚 SCL
I2C 1602 LCD模块的SDA引脚 SDA
========================= ====

|image171|

**1.5. 实验代码：**

特别注意：
对于不同的RFID-RC522的白磁卡和蓝色钥匙扣，其白磁卡值和蓝色钥匙扣的值可能都不一样。所以，当使用你自己的白磁卡片靠近RFID模块的感应区域时，你需要将你在串口监视器窗口中读取的值更换程序中的值。

|image172|

|image173|

|image174|

|image175|

**1.6. 实验结果**\ ：

上传测试代码成功，上电后，将我们提供的白磁卡片靠近RFID-RC522模块的感应区域，门就会转动打开，LCD1602显示“open”。点击一下按键1，门转动关闭。刷另一个蓝色的感应块，LCD1602显示“error”。

第13课 摩斯密码
~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

摩尔斯电码也被称作摩斯密码，是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。

现在我们使用它来作为我们的密码门。

**1.2. 摩斯密码的相关资料：**

摩斯密码对应的字符如下：

|image176|

**1.3. 实验组件：**

=================== =============== =========== ===============
|image177|          |image178|      |image179|  |image180|
=================== =============== =========== ===============
ESP32 Plus主板 \* 1 按键*2          180度舵机*1 3P 转杜邦线母*2
|image181|          |image182|      |image183|  
I2C LCD1602模块\* 1 4P 转杜邦线母*1 USB线*1     
=================== =============== =========== ===============

**1.4. 模块接线图：**

按键1，按键2，门舵机和I2C 1602 LCD模块的控制引脚：

========================= ====
按键1（S引脚）            io16
========================= ====
按键2（S引脚）            io27
门舵机（橙黄色线引脚）    io13
I2C 1602 LCD模块的SCL引脚 SCL
I2C 1602 LCD模块的SDA引脚 SDA
========================= ====

|image184|

**1.5. 实验代码：**

简单的使用\ |image185|\ 作为正确密码。

非常简单的实现按钮的点击、双击、长按等功能。对应摩斯密码，点击为“.”，长按再松开为“-”。(“.”的意思是点击按钮，“-”的意思是长按按钮2秒以上)

|image186|

|image187|

|image188|

|image189|

**1.6. 实验结果：**

上传测试代码成功，上电后，开始LCD1602显示“Enterpassword”，点击或长按按键1,来输入密码，如果输入正确密码“.--.-.”，(“.”的意思是点击按钮，“-”的意思是长按按钮2秒以上)输入一位显示屏就显示一个“\*”号，再点击按键2，门就转动打开，LCD1602显示“open”。如果是输入了其它错误的密码，门不会动，LCD1602显示error，两秒后显示enteragain。长按按键2关门。

第14课 WiFi控制
~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

物联网，就是将硬件设备接入网络。接入网络最便捷的方法就是使用WiFi连接了。ESP32Plus主控板自带有WiFi模块，所以将我们的智能家居接入网络还是比较简单的。

我们将智能家居连接到局域网，也就是你家里的WiFi或者你手机开启的热点。连接成功后就会分配一个地址，这个地址就可以用来通讯了，我们将分配到的地址在串口监视器中打印出来。

**1.2. 相关资料：**

Station模式：当ESP32选择Station模式时，它作为一个WiFi客户端。它可以连接路由器网络，通过WiFi连接与路由器上的其他设备通信。如下图所示，PC和路由器已经连接，ESP32如果要与PC通信，需要将PC和路由器连接起来。

|image190|

**1.3. 实验组件：**

=============== ==========
|image191|      |image192|
=============== ==========
ESP32Plus主板*1 USB线*1
=============== ==========

**1.4. 模块接线图：**

|image193|

**1.5. APP下载安装：**

`安装APP及说明书 <https://www.keyesrobot.cn/projects/KE3050/zh-cn/latest/docs/APP%E4%B8%8B%E8%BD%BD%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html>`__

**1.6. 智能家居连接WiFi的实验代码：**

⚠️ \ **特别提醒：**\ 
打开代码文件后，需要修改ESP32开发板需要连接的WiFi名称与密码，您需要分别将
``ChinaNet-2.4G-0DF0`` 和 ``ChinaNet@233`` 替换为您自己的 Wi-Fi 名称和
WiFi
密码。WiFi名称和WiFi密码修改后才能上传代码，否则你的ESP32开发板将无法连接网络。

|image194|

⚠️ **注意：
请确保代码中的WiFi名称和WiFi密码与连接到您的计算机、手机/平板电脑、ESP32开发板和路由器的网络相同，它们必须在同一局域网（WiFi）内。**

⚠️ **注意：WiFi必须是2.4Ghz频率的，否则ESP32无法连接WiFi**\ 。

实验代码:

|image195|

**1.7. 实验结果：**

上传测试代码成功，上电后，如果成功连接上WiFi，LCD1602
显示分配到的IP地址，同时在串口监视器点击\ |image196|\ 设置波特率为9600，串口监视器会打印出分配到的IP地址。（假如串口监视器没打印出分配到的IP地址，可以按下主板上的复位键重启)

注意：只支持连接2.4GHz频段的WiFi，不支持连接5GHz频段的WiFi。

**打开APP，选择WIFI**

|image197|

在APP上输入LCD1602 显示的IP地址或串口监视器窗口打印的IP地址，然后单击
**CONNECT** 按钮。

|image198|

连上WIFI之后，分别单击APP上对应的按钮，串口监视器窗口打印接收到的字符串。

|image199|

第15课 手机APP控制智能家居
~~~~~~~~~~~~~~~~~~~~~~~~~~

**1.1. 项目介绍：**

大部分人都有手机，现在大部分物联网产品的控制端都是用手机，使用起来就很便捷，打开手机APP，点击一下就能启动各种设备。

物联网智能家居，将智能家居通过WiFi连接家庭WiFi，用于操作的手机也要连接同一个WiFi，当然也可以是手机打开热点，智能家居连接手机的热点。连接成功后，然后在手机APP上输入对应的IP地址进行通讯。实现APP控制智能家居的各个功能。

**1.2. APP下载：**

⚠️ **特别提醒：如果前面已经下载安装了APP，则这一步骤可以直接跳过。**

`安装APP及说明书 <https://www.keyesrobot.cn/projects/KE3050/zh-cn/latest/docs/APP%E4%B8%8B%E8%BD%BD%E5%92%8C%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E.html>`__

**1.3. 实验组件：**

==================== =============== =============== ===================
|image200|           |image201|      |image202|      |image203|
==================== =============== =============== ===================
ESP32 Plus主板 \* 1  XHT11传感器*1   黄色LED模块*1   SK6812RGB灯模块*1
|image204|           |image205|      |image206|      |image207|
无源蜂鸣器模块*1     130电机模块*1   180度舵机*2     水滴传感器模块*1
|image208|           |image209|      |image210|      |image211|
人体红外热释传感器*1 MQ2传感器*1     风扇叶*1        I2C LCD1602模块\* 1
|image212|           |image213|      |image214|      
USB线*1              4P 转杜邦线母*3 3P 转杜邦线母*6 
==================== =============== =============== ===================

**1.4. 模块接线图：**

====================== ==================== =======================
传感器模块名称         传感器模块引脚       ESP32Plus主板对应的接线
====================== ==================== =======================
人体红外热释传感器模块 G/V/S                G/V/io14
无源蜂鸣器模块         G/V/S                G/V/io25
黄色LED模块            G/V/S                G/V/io12
小风扇模块             GND/VCC/IN+/IN-      G/V/io19/io18
控制门的舵机1          棕色线/红色线/橙色线 G/V/io13
控制窗的舵机2          棕色线/红色线/橙色线 G/V/io5
MQ-2气体传感器模块     GND/VCC/D            G/V/io23
XHT11模块              G/V/S                G/V/io17
SK6812RGB灯模块        G/V/S                G/V/io26
LCD1602显示屏模块      GND/VCC/SDA/SCL      GND/V/SDA/SCL
水滴传感器模块         G/V/S                G/V/io34
====================== ==================== =======================

**1.5. 测试APP与智能家居通讯的实验代码1：**

使用APP控制智能家居的LED灯和风扇的开关。

⚠️ \ **特别提醒：**\ 
打开代码文件后，需要修改ESP32开发板需要连接的WiFi名称与密码，您需要分别将
``ChinaNet-2.4G-0DF0`` 和 ``ChinaNet@233`` 替换为您自己的 Wi-Fi 名称和
WiFi
密码。WiFi名称和WiFi密码修改后才能上传代码，否则你的ESP32开发板将无法连接网络。

|image215|

⚠️ **注意：
请确保代码中的WiFi名称和WiFi密码与连接到您的计算机、手机/平板电脑、ESP32开发板和路由器的网络相同，它们必须在同一局域网（WiFi）内。**

⚠️ **注意：WiFi必须是2.4Ghz频率的，否则ESP32无法连接WiFi**\ 。

实验代码:

|image216|

**1.6. 操作步骤及实验结果1：**

上传测试代码成功，上电后，如果成功连接上WiFi，LCD1602显示出分配到的IP地址，同时在串口监视器点击\ |image217|\ 设置波特率为9600，串口监视器也会打印出分配到的IP地址。（假如串口监视器没打印出分配到的IP地址，可以按下主板上的复位键重启)

注意：只支持连接2.4GHz频段的WiFi，不支持连接5GHz频段的WiFi。

**1. 打开APP，选择WIFI**

|image218|

**2. APP控制LED和风扇**

手机需要和智能家居连接同一个WiFi，或者手机打开热点，智能家居连接手机的热点。

APP输入IP地址（LCD1602显示出分配到的IP地址或在串口监视器点击\ |image219|\ 设置波特率为9600，串口监视器会打印出分配到的IP地址），点击
**CONNECT** 连接，连接成功标志是APP下方会跳出 Connected，需要注意看.

然后就可以点击LED，可以看到智能家居的LED被打开；点击Fan按钮，风扇被打开。如下图操作。

|image220|

**1.7. IoT智能家居的实验代码2：**

⚠️ \ **特别提醒：**\ 
打开代码文件后，需要修改ESP32开发板需要连接的WiFi名称与密码，您需要分别将
``ChinaNet-2.4G-0DF0`` 和 ``ChinaNet@233`` 替换为您自己的 Wi-Fi 名称和
WiFi
密码。WiFi名称和WiFi密码修改后才能上传代码，否则你的ESP32开发板将无法连接网络。

|image221|

⚠️ **注意：
请确保代码中的WiFi名称和WiFi密码与连接到您的计算机、手机/平板电脑、ESP32开发板和路由器的网络相同，它们必须在同一局域网（WiFi）内。**

⚠️ **注意：WiFi必须是2.4Ghz频率的，否则ESP32无法连接WiFi**\ 。

实验代码:

|image222|

**1.8. 操作步骤及实验结果2：**

上传测试代码成功，上电后，手机需要和智能家居连接同一个WiFi，或者手机打开热点，智能家居连接手机的热点。\ **注意：**\ 
只支持连接2.4GHz频段的WiFi，不支持连接5GHz频段的WiFi。

⚠️
**注意：手机或平板一定要与ESP32开发板连接的是同一个WiFi，否则将无法进入控制页面，还有就是ESP32开发板在使用WiFi功能时功耗很大需要外接DC电源才能满足它的工作电力需求，如果达不到它的工作电力需求ESP32板将会一直复位导致代码无法正常运行。**

A.
APP输入IP地址（LCD1602显示出分配到的IP地址，或点击IDE的串口监视器\ |image223|\ 设置波特率为9600，串口监视器窗口显示的IP地址）

B. 点击 **CONNECT** 连接IP地址

C. 连接成功标志是跳出 Connected 字样，需要注意看。

D. IP地址连接上之后，单击APP界面上对应的按钮控制对应的传感器模块工作。

|image224|

.. |image1| image:: media/KidsBlock-IDE1.png
.. |image2| image:: media/KidsBlock-IDE1.png
.. |image3| image:: media/KidsBlock-IDE2.png
.. |image4| image:: media/KidsBlock-IDE3.png
.. |image5| image:: media/KidsBlock-IDE4.png
.. |image6| image:: media/KidsBlock-IDE5.png
.. |image7| image:: media/KidsBlock-IDE6.png
.. |image8| image:: media/KidsBlock-IDE7.png
.. |image9| image:: media/KidsBlock-IDE8.png
.. |image10| image:: media/KidsBlock-IDE1.png
.. |image11| image:: media/KidsBlock-IDE2.png
.. |image12| image:: media/KidsBlock-IDE1.png
.. |image13| image:: media/KidsBlock-IDE3.png
.. |image14| image:: media/CONNECT1.png
.. |image15| image:: media/KidsBlock-IDE9.png
.. |image16| image:: media/KidsBlock-IDE6.png
.. |image17| image:: media/KidsBlock-IDE7.png
.. |image18| image:: media/KidsBlock-IDE8.png
.. |image19| image:: media/KidsBlock-IDE4.png
.. |image20| image:: media/NOCONNECT.png
.. |image21| image:: media/KidsBlock-IDE10.png
.. |image22| image:: media/1874abbb35ed2bb3a1bd5967f3a13181.png
.. |image23| image:: media/c8b69ae6e64fda3bae42967c3ad84d84.png
.. |image24| image:: media/e1f094f0c07db549dd1b1e0154513114.png
.. |image25| image:: media/40611fa075beb0ad967d4e954c31736a.png
.. |image26| image:: media/0d5e411fcf5f60efca5d36584414dcdf.png
.. |image27| image:: media/516cc869f4bcb0ddc057b60d70ad307f.png
.. |image28| image:: media/311897027a458380b883da7d8a34f081.png
.. |image29| image:: media/46f7c6acd0850839a16ff9db499c4206.png
.. |image30| image:: media/led-schematic-diagram.png
.. |image31| image:: media/esp32.png
.. |image32| image:: media/yellow-led2.png
.. |image33| image:: media/3p.png
.. |image34| image:: media/usb.png
.. |image35| image:: media/pjt1.png
.. |image36| image:: media/4a32c88115c1c972e5242a46d6dc60f6.png
.. |image37| image:: media/led-schematic-diagram.png
.. |image38| image:: media/PWM.png
.. |image39| image:: media/Analog-Digital.png
.. |image40| image:: media/PWM1.png
.. |image41| image:: media/ESP32-PWM.png
.. |image42| image:: media/esp32.png
.. |image43| image:: media/yellow-led2.png
.. |image44| image:: media/3p.png
.. |image45| image:: media/usb.png
.. |image46| image:: media/pjt1.png
.. |image47| image:: media/0532127489f7ae93a4dff8d950f72520.png
.. |image48| image:: media/72e6cee72575ce2e486d8febdb505456.png
.. |image49| image:: media/button-schematic-diagram.png
.. |image50| image:: media/esp32.png
.. |image51| image:: media/yellow-led2.png
.. |image52| image:: media/button.png
.. |image53| image:: media/3p.png
.. |image54| image:: media/usb.png
.. |image55| image:: media/pjt3.png
.. |image56| image:: media/753a8efa6efc166d15e2459141ba364c.png
.. |image57| image:: media/fb11e1472597795add579dc167740fce.png
.. |image58| image:: media/7c5070b414702ea568fac4294d1da780.png
.. |image59| image:: media/420017e31acd1cd787083dd82a757133.png
.. |image60| image:: media/b29721c052d6e0d8477f7239c559b8dc.png
.. |image61| image:: media/fb11e1472597795add579dc167740fce.png
.. |image62| image:: media/6a4dff9cb55a6900051a48888f701b2e.png
.. |image63| image:: media/pir-schematic-diagram.png
.. |image64| image:: media/esp32.png
.. |image65| image:: media/pir.png
.. |image66| image:: media/yellow-led2.png
.. |image67| image:: media/3p.png
.. |image68| image:: media/usb.png
.. |image69| image:: media/esp32.png
.. |image70| image:: media/pir.png
.. |image71| image:: media/yellow-led2.png
.. |image72| image:: media/3p.png
.. |image73| image:: media/usb.png
.. |image74| image:: media/esp32.png
.. |image75| image:: media/pir.png
.. |image76| image:: media/yellow-led2.png
.. |image77| image:: media/3p.png
.. |image78| image:: media/usb.png
.. |image79| image:: media/pjt4.png
.. |image80| image:: media/90109fd0258900675b9353e5a951ea14.png
.. |image81| image:: media/fb11e1472597795add579dc167740fce.png
.. |image82| image:: media/2f3ef81d73558b1b11359e9d372a790c.png
.. |image83| image:: media/32609fb81716310f1cdd50bfc9251cfe.png
.. |image84| image:: media/buzzer-schematic-diagram.png
.. |image85| image:: media/esp32.png
.. |image86| image:: media/buzzer.png
.. |image87| image:: media/button.png
.. |image88| image:: media/3p.png
.. |image89| image:: media/usb.png
.. |image90| image:: media/pjt5.png
.. |image91| image:: media/8b372002ff4298b080aac6fabd947ebe.png
.. |image92| image:: media/28b63e6eb5f6f297774ed16f3450241a.png
.. |image93| image:: media/3b24324bddb2624ed29cb95dd17f1e76.png
.. |image94| image:: media/6d4c04d78e0714a3387155cc2b101f60.png
.. |image95| image:: media/servo1.png
.. |image96| image:: media/servo2.png
.. |image97| image:: media/esp32.png
.. |image98| image:: media/stem.png
.. |image99| image:: media/servo.png
.. |image100| image:: media/3p.png
.. |image101| image:: media/usb.png
.. |image102| image:: media/esp32.png
.. |image103| image:: media/stem.png
.. |image104| image:: media/servo.png
.. |image105| image:: media/3p.png
.. |image106| image:: media/usb.png
.. |image107| image:: media/pjt6.png
.. |image108| image:: media/47dc47e8ba67f2a4532b3a80d20e378d.png
.. |image109| image:: media/0c5334dc9e1d2ea0f80533ba6e0de11e.png
.. |image110| image:: media/rgb1.png
.. |image111| image:: media/esp32.png
.. |image112| image:: media/button.png
.. |image113| image:: media/SK6812RGB.png
.. |image114| image:: media/3p.png
.. |image115| image:: media/usb.png
.. |image116| image:: media/pjt7.png
.. |Img| image:: ./media/img-20250604134917.png
.. |image117| image:: ./media/img-20250604135132.png
.. |image118| image:: media/motor-schematic-diagram.png
.. |image119| image:: media/esp32.png
.. |image120| image:: media/button.png
.. |image121| image:: media/motor.png
.. |image122| image:: media/fan2.png
.. |image123| image:: media/4p.png
.. |image124| image:: media/3p.png
.. |image125| image:: media/usb.png
.. |image126| image:: media/pjt8.png
.. |image127| image:: media/912a47b420c21a8c91b40c147095b1ed.png
.. |image128| image:: ./media/img-20250221084242.png
.. |image129| image:: media/lcd.jpeg
.. |image130| image:: media/esp32.png
.. |image131| image:: media/lcd1.png
.. |image132| image:: media/4p.png
.. |image133| image:: media/usb.png
.. |image134| image:: media/pjt9.png
.. |image135| image:: media/c463329054c5dfe00d2b9569b821a7ae.png
.. |image136| image:: media/gas.png
.. |image137| image:: media/gas1.png
.. |image138| image:: media/gas-schematic-diagram.png
.. |image139| image:: media/esp32.png
.. |image140| image:: media/gas.png
.. |image141| image:: media/buzzer.png
.. |image142| image:: media/3p.png
.. |image143| image:: media/lcd1.png
.. |image144| image:: media/4p.png
.. |image145| image:: media/usb.png
.. |image146| image:: media/pjt10.png
.. |image147| image:: media/2663202069ffbc7825b5e45c0b748cf2.png
.. |image148| image:: media/944c282728853b663414a0440edb4f86.png
.. |image149| image:: media/xht11.png
.. |image150| image:: media/dht11-schematic-diagram.png
.. |image151| image:: media/dht11-diagram.png
.. |image152| image:: media/esp32.png
.. |image153| image:: media/xht11.png
.. |image154| image:: media/3p.png
.. |image155| image:: media/lcd1.png
.. |image156| image:: media/4p.png
.. |image157| image:: media/usb.png
.. |image158| image:: media/pjt11.png
.. |image159| image:: media/92264670da2e70263bfc8cd9a5c45454.png
.. |image160| image:: media/esp32.png
.. |image161| image:: media/RFID-MFRC522.png
.. |image162| image:: media/servo.png
.. |image163| image:: media/3p.png
.. |image164| image:: media/lcd1.png
.. |image165| image:: media/button.png
.. |image166| image:: media/white-card.jpeg
.. |image167| image:: media/4p.png
.. |image168| image:: media/4p1.png
.. |image169| image:: media/usb.png
.. |image170| image:: ./media/blue-card.png
.. |image171| image:: media/pjt12.png
.. |image172| image:: media/b6be29133b4c04ef88db5a813b636472.png
.. |image173| image:: media/b7c8b4bd5a5c0357ef65eda415433679.png
.. |image174| image:: media/40a3347133916db3184752d846288c2a.png
.. |image175| image:: media/daf0b499809e0f1cf6d39abd4a7613b5.png
.. |image176| image:: media/morse-code.png
.. |image177| image:: media/esp32.png
.. |image178| image:: media/button.png
.. |image179| image:: media/servo.png
.. |image180| image:: media/3p.png
.. |image181| image:: media/lcd1.png
.. |image182| image:: media/4p.png
.. |image183| image:: media/usb.png
.. |image184| image:: media/pjt13.png
.. |image185| image:: media/76ebed9bb34d03a41a2317cf6215eff8.png
.. |image186| image:: media/e4f0648de389ca01e40e0f634fe3c06e.png
.. |image187| image:: media/2b37822fa90f41f807c278ef53c38329.png
.. |image188| image:: media/05df0f1aa5cfaed75bf7bc145f7d586b.png
.. |image189| image:: media/811d287806ed372ac9d8c8758905cdc9.png
.. |image190| image:: media/station.jpeg
.. |image191| image:: media/esp32.png
.. |image192| image:: media/usb.png
.. |image193| image:: media/382a74544ebbdf9cce9550a2f3b0dc73.png
.. |image194| image:: media/1c082619017721831a1d5459d9d62d68.png
.. |image195| image:: media/9e32ff111bf92b98501db1d4e94bc559.png
.. |image196| image:: media/6081c6cdc3af46ed5666bf706eac396c.png
.. |image197| image:: media/IOT-home2.png
.. |image198| image:: ./media/img-20250604154159.png
.. |image199| image:: ./media/img-20250604153359.png
.. |image200| image:: media/esp32.png
.. |image201| image:: media/xht11.png
.. |image202| image:: media/yellow-led2.png
.. |image203| image:: media/SK6812RGB.png
.. |image204| image:: media/buzzer.png
.. |image205| image:: media/motor.png
.. |image206| image:: media/servo.png
.. |image207| image:: media/stem.png
.. |image208| image:: media/pir.png
.. |image209| image:: media/gas.png
.. |image210| image:: media/fan2.png
.. |image211| image:: media/lcd1.png
.. |image212| image:: media/usb.png
.. |image213| image:: media/4p.png
.. |image214| image:: media/3p.png
.. |image215| image:: media/1c082619017721831a1d5459d9d62d68.png
.. |image216| image:: ./media/img-20250604143643.png
.. |image217| image:: media/6081c6cdc3af46ed5666bf706eac396c.png
.. |image218| image:: media/IOT-home2.png
.. |image219| image:: media/6081c6cdc3af46ed5666bf706eac396c.png
.. |image220| image:: media/APP1.png
.. |image221| image:: media/1c082619017721831a1d5459d9d62d68.png
.. |image222| image:: ./media/img-20250604143449.png
.. |image223| image:: media/6081c6cdc3af46ed5666bf706eac396c.png
.. |image224| image:: media/app0.png
